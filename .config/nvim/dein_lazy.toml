#[[plugins]]
#repo = 'Shougo/deoplete.nvim'
#on_i = 1
#hook_source = '''
#    let g:deoplete#enable_at_startup = 1
#    let g:deoplete#enable_smart_case=1
#    inoremap <expr><TAB> pumvisible() ? "\<C-N>" : "\<TAB>"
#'''
#
#[[plugins]]
#repo = 'zchee/deoplete-jedi'
#depends = ['deoplete.nvim']
#on_ft = ['python']

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

# === toml plugins
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

# === scala plugins ===
[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = ['scala']

# === go lang plugins ===
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
    "  参考: https://github.com/hnakamur/vim-go-tutorial-ja

    " :nextなどでバッファ移動時にファイルが変更されていれば書き込む
    " :GoBuildするときにファイルを保存する必要がなくなる
    autocmd FileType go set autowrite

    " === VIM-GO COMMAND KEYBINDS ===
    autocmd FileType go nmap <leader>b  <Plug>(go-build) 
    autocmd FileType go nmap <leader>r <Plug>(go-run)
    autocmd FileType go nmap <leader>t <Plug>(go-test)
    autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
    autocmd FileType go nmap <Leader>i <Plug>(go-info)

    " === VIM-GO OPTIONS ===
    " GoSameIdsClear 全てのカーソル位置の変数がハイライトされる
    let g:go_auto_sameids = 1

    " GoRunの結果をsplitで表示 Default->"vsplit"
    let g:go_term_mode = "split"

    " :GoFmt時にimportのチェック Default->gofmt
    " ファイルが巨大だと保存時の:GoFmtが遅くなるので消しましょう
    let g:go_fmt_command = "goimports"

    " "コメントも関数の一部として扱われたくないときは0に設定する Default=>1
    " let g:go_textobj_include_function_doc = 0 

    " キャメルケースに変換(defalut snake_cake)
    let g:go_addtags_transform = "camelcase"

    " vimrcやinit.vimに以下を追加するとファイル保存時にGoLint、GoVet、GoErrCheckをまとめてしてくれる。
    let g:go_metalinter_autosave = 1

    " 自動保存時に走らせるLinterタイムアウト Default->"5s"
    " let g:go_metalinter_deadline = "5s"

    " === Others ===
    " GoInstallBinaries: vim-goに必要なツールのインストール(go get がバックグラウンドで動いて大変時間がかかる)
    " GoUpdateBinaries: GoInstallBinariesで落としたツールのアップデート
    " GoImport: importパスの追加
    " GoImportAs: importパスの追加(パッケージ名変更)
    " GoDrop: importパスの削除
    " GoDef: ctagsジャンプと同じ(ショートカットキー<C-]>)
    " GoDecls: gtagsジャンプと同じ(ファイル内のみ対象) ctrlPやFZFと連携
    " GoDeclsdir: gtagsジャンプと同じ(ディレクトリ内の全ファイル対象)
    " GoReferrers: gtagsジャンプと似たようなもん？GoDeclsと違ってロケーションリストに表示
    " GoDescribe: フィールドの定義、メソッドの組と URL 構造体のフィールドが表示される
    " GoImplements: 型が実装しているインターフェースをロケーションリストに表示
    " GoWhicherrs: モードはエラーの型の値に現れうる可能な定数の組、グローバル変数、そして具象型を報告
    " GoCallees: 関数を呼び出す可能性のあるターゲットを表示
    " GoCallstack: 選択部分を含む関数へのコールグラフの根本からの任意のパスを表示
    " GoChannelPeers: チャンネルの送信先 / 受信先を表示
    " GoRename: GOPATH 以下にある全てのパッケージを検索してその識別子に依存している全ての識別子をリネーム
    " GoFreevars: どれだけ多くの変数に依存しているかを見る
    " GoGenarate: コード生成
    " GoImpl: インターフェースを実装するメソッドスタブの生成
    " GoPlay: コードをGo Playground に公開する(リンクはバッファかクリップボードにコピーされる)
'''

[[plugins]]  # go completion
repo = 'zchee/deoplete-go'
build = 'make'
on_ft = 'go'
depends = ['deoplete.nvim']
hook_source = '''
    let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
'''