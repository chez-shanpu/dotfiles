[[plugins]]
repo = 'Shougo/dein.vim'

# [[plugins]]
# repo = 'vim-scripts/vim-auto-save'
# hook_add = '''
#     let g:auto_save = 1
#     let g:auto_save_no_updatetime = 1
# '''

[[plugins]]
repo = '907th/vim-auto-save'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
hook_post_update = 'TSUpdate'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    set updatetime=100
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
    if dein#util#_is_windows()
        let cmd = 'tools\\update-dll-mingw'
    elseif dein#util#_is_cygwin()
        let cmd = 'make -f make_cygwin.mak'
    elseif executable('gmake')
        let cmd = 'gmake'
    else
        let cmd = 'make'
    endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo='neoclide/coc.nvim'
merged=0
rev='release'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'kristijanhusak/defx-git'
hook_add = '''
    call defx#custom#column('git', 'indicators', {
      \ 'Modified'  : '✹',
      \ 'Staged'    : '✚',
      \ 'Untracked' : '✭',
      \ 'Renamed'   : '➜',
      \ 'Unmerged'  : '═',
      \ 'Ignored'   : '☒',
      \ 'Deleted'   : '✖',
      \ 'Unknown'   : '?'
      \ })
'''

[[plugins]]
repo ="kristijanhusak/defx-icons"
hook_add = '''
    let g:defx_icons_mark_icon = ' ✓'
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
    call defx#custom#option('_', {
          \ 'columns': 'indent:git:icons:space:filename',
          \ 'show_ignored_files': 1,
          \ })
    call defx#custom#option('_', {
      \ 'winwidth': 40,
      \ 'split': 'vertical',
      \ 'direction': 'topleft',
      \ 'show_ignored_files': 1,
      \ 'buffer_name': 'exlorer',
      \ 'toggle': 1,
      \ 'resume': 1,
      \ })
    " fiで起動
    nnoremap <silent>fi :<C-u>Defx -new `expand('%:p:h')` -search=`expand('%:p')`<CR>
    autocmd FileType defx call s:defx_my_settings()
      function! s:defx_my_settings() abort
        " Define mappings
        "" Enterでディレクトリへ移動またはファイルを開く
        nnoremap <silent><buffer><expr> <CR> defx#do_action('drop')
        "" oで移動せずにディレクトリををOpen/Close
        nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
        "" 終了
        nnoremap <silent><buffer><expr> q defx#do_action('quit')
        nnoremap <silent><buffer><expr> c defx#do_action('copy')
        nnoremap <silent><buffer><expr> m defx#do_action('move')
        nnoremap <silent><buffer><expr> p defx#do_action('paste')
        
        " 移動系
        "" hで一つ上の階層へ。lで一つ下の階層へ移動、またはファイルを開く
        nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> l defx#do_action('drop')
        "" 末尾/先頭から更に移動しようとしたら先頭/末尾に移動する
        "" UIの仕様上、先頭がインデントになるため、単にggやGすると空白で無い最初の文字にカーソルが移動する。
        "" 0をその後に入力して必ず行頭にくるようにする。
        nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg0' : 'j'
        nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G0' : 'k'
        
        " 画面を分割して開く
        nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
        nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
        
        " ファイルとか作る系
        nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> N defx#do_action('new_file')
        nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
        nnoremap <silent><buffer><expr> d defx#do_action('remove')
        nnoremap <silent><buffer><expr> r defx#do_action('rename')
        
        " 地味に便利系
        nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
        nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
        nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
        
        " 表示変える系
        nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
        nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
        nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
        
        " その他（使ったこと無い）
        nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
        nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
        nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
        nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
      endfunction
'''

# color scheme
[[plugins]]
# repo = 'jacoborus/tender.vim'
# repo = 'jonathanfilip/vim-lucius'
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''   
    let g:airline_powerline_fonts = 1
    set laststatus=2
    let g:airline_theme = 'simple'
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#virtualenv#enabled = 1
    let g:airline#extensions#whitespace#mixed_indent_algo = 1 	
''' 

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nnoremap [figitive] <Nop>
    nnoremap <Leader>i [figitive]
    nnoremap <silent> [figitive]s :<C-u>Gstatus<CR>
    nnoremap <silent> [figitive]d :<C-u>Gdiff<CR>
    nnoremap <silent> [figitive]b :<C-u>Gblame<CR>
    set diffopt+=vertical
'''

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
